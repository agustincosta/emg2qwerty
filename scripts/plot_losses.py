import glob
import os
from typing import Optional

import matplotlib.pyplot as plt
import typer
from tensorboard.backend.event_processing.event_accumulator import EventAccumulator  # type: ignore


def extract_tensorboard_data(log_dir: str):
    """Extract data from TensorBoard logs into a dictionary."""
    event_paths = glob.glob(os.path.join(log_dir, "events.out.tfevents.*"))

    if not event_paths:
        raise ValueError(f"No TensorBoard event files found in {log_dir}")

    # Use the most recent event file
    event_path = sorted(event_paths)[-1]
    typer.echo(f"Reading TensorBoard logs from: {event_path}")

    event_acc = EventAccumulator(event_path)
    event_acc.Reload()

    # Get available tags (metrics)
    tags = event_acc.Tags()["scalars"]
    typer.echo(f"Available metrics: {tags}")

    # Extract data for each tag
    data = {}
    for tag in tags:
        events = event_acc.Scalars(tag)
        data[tag] = {
            "step": [event.step for event in events],
            "value": [event.value for event in events],
            "wall_time": [event.wall_time for event in events],
        }

    return data


def plot_losses(data, output_path=None, show=True):
    """Plot training, validation, and test losses."""
    plt.figure(figsize=(12, 8))

    # Plot training loss
    if "train/loss" in data:
        train_data = data["train/loss"]
        plt.plot(train_data["step"], train_data["value"], label="Training Loss", color="blue")

    # Plot validation loss
    if "val/loss" in data:
        val_data = data["val/loss"]
        plt.plot(val_data["step"], val_data["value"], label="Validation Loss", color="orange")

    # Plot test loss if available
    if "test/loss" in data:
        test_data = data["test/loss"]
        plt.plot(test_data["step"], test_data["value"], label="Test Loss", color="green")

    plt.xlabel("Step")
    plt.ylabel("Loss")
    plt.title("Training, Validation, and Test Losses")
    plt.legend()
    plt.grid(True, linestyle="--", alpha=0.7)

    if output_path:
        plt.savefig(output_path, dpi=300, bbox_inches="tight")
        typer.echo(f"Plot saved to {output_path}")

    if show:
        plt.show()


def plot_metrics(data, output_dir=None, show=True):
    """Plot all available metrics."""
    # Group metrics by phase (train, val, test)
    metrics_by_phase: dict[str, list[str]] = {}
    for tag in data:
        phase = tag.split("/")[0]
        metric = tag.split("/")[1]

        if phase not in metrics_by_phase:
            metrics_by_phase[phase] = []

        metrics_by_phase[phase].append(metric)

    # Plot each metric type separately
    unique_metrics = set()
    for metrics in metrics_by_phase.values():
        unique_metrics.update(metrics)

    for metric in unique_metrics:
        plt.figure(figsize=(12, 8))

        for phase in metrics_by_phase:
            if metric in metrics_by_phase[phase]:
                tag = f"{phase}/{metric}"
                plt.plot(
                    data[tag]["step"], data[tag]["value"], label=f"{phase.capitalize()} {metric}"
                )

        plt.xlabel("Step")
        plt.ylabel(metric.replace("_", " ").title())
        plt.title(f"{metric.replace('_', ' ').title()} Over Time")
        plt.legend()
        plt.grid(True, linestyle="--", alpha=0.7)

        if output_dir:
            output_path = os.path.join(output_dir, f"{metric}_plot.png")
            plt.savefig(output_path, dpi=300, bbox_inches="tight")
            typer.echo(f"Plot saved to {output_path}")

        if show:
            plt.show()


def main(
    log_dir: str = typer.Argument(..., help="Directory containing TensorBoard logs"),
    output: Optional[str] = typer.Option(None, "--output", "-o", help="Output directory for plots"),
    no_show: bool = typer.Option(False, "--no-show", help="Do not display plots"),
):
    """
    Plot losses and metrics from TensorBoard logs generated by PyTorch Lightning.

    This tool extracts data from TensorBoard event files and creates visualizations
    of training, validation, and test metrics over time.
    """
    # Create output directory if specified
    if output:
        os.makedirs(output, exist_ok=True)

    # Extract data from TensorBoard logs
    data = extract_tensorboard_data(log_dir)

    # Plot losses
    loss_output_path = os.path.join(output, "losses.png") if output else None
    plot_losses(data, output_path=loss_output_path, show=not no_show)

    # Plot all metrics
    plot_metrics(data, output_dir=output, show=not no_show)


if __name__ == "__main__":
    typer.run(main)
